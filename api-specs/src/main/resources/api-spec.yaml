openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Fruits API
  description: An API to demonstrate Swagger and Spring Boot
security:
  #  - bearerAuth: []
  - apiKeyAuth: []
paths:
  /applications:
    post:
      description: register a new application
      operationId: registerApplication
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/RegisteringApplication'
      responses:
        '201':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Token'

    get:
      description: get the list of all applications
      operationId: getApplications
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
  /badges:
    post:
      description: Create a new badge
      operationId: createBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Badge'

    get:
      description: get the list of all badges
      operationId: getBadges
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
  /fruits:
    post:
      description: create a fruit
      operationId: createFruit
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Fruit'
      responses:
        '201':
          description: created
    get:
      description: get the list of all fruits
      operationId: getFruits
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fruit'
  /fruits/{id}:
    get:
      description: get one fruit, by id
      operationId: getFruit
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Fruit'
  /pointScales:
    post:
      description: Create a new point scale
      operationId: createPointScale
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PointScale'
      responses:
        '201':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointScale'

    get:
      description: get the list of all point scales
      operationId: getPointScales
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointScale'
  /leaderBoards/{pointScale}:
    get:
      description: Get the leader board for the given point scale
      operationId: getLeaderBoard
      parameters:
        - in: path
          name: pointScale
          schema:
            type: string
          required: true
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of users to return in the leader board
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                  $ref: '#/components/schemas/LeaderBoard'

components:
  securitySchemes:
    #    bearerAuth:            # arbitrary name for the security scheme
    #      type: http
    #      scheme: bearer       # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    Fruit:
      type: object
      properties:
        kind:
          type: string
        colour:
          type: string
        size:
          type: string
        weight:
          type: string
        expirationDate:
          type: string
          format: date
          nullable: false
        expirationDateTime:
          type: string
          format: date-time
    RegisteringApplication:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        description:
          type: string
    Application:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        description:
          type: string
        token:
          type: string
    Token:
      type: object
      properties:
        token:
          type: string
    Badge:
      type: object
      properties:
        name:
          type: string
        image:
          type: string
        description:
          type: string
    PointScale:
      type: object
      properties:
        name:
          type: string
    UserScore:
      type: object
      properties:
        userId:
          type: int
        score:
          type: int
    LeaderBoard:
      type: object
      properties:
        pointScale:
          type: string
        leaders:
          type: array
          items:
            $ref: '#/components/schemas/UserScore'